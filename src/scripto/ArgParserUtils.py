"""
A utility module for all the various functions used in building the argument parser.
"""
from types import FunctionType
from typing import Tuple

from scripto.FuncUtils import make_kebab_case, get_description, get_first_doc_sentence, \
    get_parameters


def add_logging_flags(parser) -> None:
    """
    Adds logging flags to the parser.
    :param parser: The parser to add the flags to.
    :return: None
    """
    log_level = parser.add_mutually_exclusive_group()
    log_level.add_argument('--trace', dest='log_level', action='store_const', const='trace',
                           help='Set log level to trace')
    log_level.add_argument('--debug', dest='log_level', action='store_const', const='debug',
                           help='Set log level to debug')
    log_level.add_argument('--warn', dest='log_level', action='store_const', const='warn',
                           help='Set log level to warning')
    log_level.add_argument('--info', dest='log_level', action='store_const', const='info',
                           help='Set log level to info')


def generate_parser_definitions(func: FunctionType) -> Tuple[str, dict[str, str]]:
    """
    Creates the following definitions for the parser:
     - Function name.
     - Function description.
     - Help message.
     - Crediting epilog.
    :param func: The function to generate the definitions for.
    :return: A tuple, with the first element the name of the functions,
     followed by the rest of the definitions in a dictionary.
    """
    return make_kebab_case(func.__name__), {'description': get_description(func), 'help': get_first_doc_sentence(func),
                                            'epilog': 'Automatically generated by Scripto'}


def generate_action_settings(func: FunctionType):
    """
    Creates the required settings to add a funtion to a parser.
    :param func: The function to generate the settings for.
    :return: Generates parameters with the names, help message, type and default value if required.
    """
    # TODO re-write this function and its usages. The way the name is handled sucks.
    parameters = get_parameters(func)
    for param in parameters:
        settings = {'type': param['type'], 'help': param['description']}
        if param['type'] is bool:
            name = param['name']
            param['name'] = []
            param['name'].append(f'--{make_kebab_case(name)}')
            param['name'].append(f'-{name[0]}')
            settings['action'] = 'store_true'
            settings.pop('type')
        if 'default' in param:
            name = param['name']
            param['name'] = []
            param['name'].append(f'--{make_kebab_case(name)}')
            param['name'].append(f'-{name[0]}')
            settings['default'] = param['default']
            settings['help'] += f' Defaults to {param["default"]} if not provided.'
        yield param['name'], settings
